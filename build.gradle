plugins {
	id 'maven-publish'
	id 'org.quiltmc.loom' version '1.+'
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me" } //For REI
	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
	} //LibMultiPart
	maven { url "https://maven.bai.lol" } //WTHIT
	maven { url "https://maven.terraformersmc.com/" } //ModMenu
	maven { url 'https://maven.blamejared.com' } //Patchouli
	maven { url 'https://jitpack.io' } // v
	maven { url "https://maven.terraformersmc.com/" } //CompleteConfig
	maven { url "https://maven.siphalor.de/" } // ^
	maven { url 'https://ladysnake.jfrog.io/artifactory/mods' } //Cardinal Components
	maven { url "https://mvn.devos.one/snapshots/" } // porting lib
	maven { url 'https://maven.blamejared.com' } // patchouli
	maven { url "https://maven.isxander.dev/releases" } // complete config
	maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // forge config
	maven { url = "https://cursemaven.com" } // configured
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	} //ParchmentMC
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
		officialMojangMappings() // Uncomment if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
		parchment("org.parchmentmc.data:parchment-1.19.2:2022.11.27@zip")
	}

	modImplementation "org.quiltmc:quilt-loader:${loader_version}"

	modImplementation "org.quiltmc:qsl:${qsl_version}+${minecraft_version}"
	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api_version}-${minecraft_version}"
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

	modImplementation include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${porting_lib_version}+${minecraft_version}")
	modImplementation include("com.electronwill.night-config:core:${night_config_version}")
	modImplementation include("com.electronwill.night-config:toml:${night_config_version}")
//	modImplementation include("curse.maven:forge-config-api-port-fabric-547434:${forge_config_id}")
	modImplementation include("net.minecraftforge:forgeconfigapiport-fabric:${forge_config_version}")

	modApi("dev.architectury:architectury-fabric:${architectury_version}") {
		exclude group: "net.fabricmc"
		exclude group: "net.fabricmc.fabric-api"
	}

	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cardinal_components_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cardinal_components_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-block:${cardinal_components_version}")

	modLocalRuntime include("curse.maven:configured-fabric-667378:${configured_id}")
	modLocalRuntime "com.terraformersmc:modmenu:${modmenu_version}"

	// WTHIT
	modCompileOnly "mcp.mobius.waila:wthit-api:quilt-${wthit_version}"
	modLocalRuntime "mcp.mobius.waila:wthit:quilt-${wthit_version}"
	modLocalRuntime "lol.bai:badpackets:fabric-0.2.0"

	//TR Energy
	modCompileOnlyApi("teamreborn:energy:${energy_version}")
	modLocalRuntime("teamreborn:energy:${energy_version}") //Remove to simulate absence of TR Energy

	//Newest hot shit: Lombok
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"
	testCompileOnly "org.projectlombok:lombok:${lombok_version}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"

	// javax annotations
	implementation "com.google.code.findbugs:jsr305:3.0.1"
}

loom {
	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"
			vmArg "-Dde.luaxlab.shipping.existingData=${file("src/main/resources")}"

			runDir "build/datagen"
		}
	}

	accessWidenerPath = file("src/main/resources/littlelogistics.accesswidener")
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
